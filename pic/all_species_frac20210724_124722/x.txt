initial x:[ 1.4051e-02, -4.7287e-03,  1.1991e-02, -3.5817e-03, -4.9335e-03,
        -2.4713e-03,  7.1141e-03,  5.6769e-03,  8.5966e-03,  1.1885e-02,
         9.5587e-03, -2.2178e-03,  8.1694e-03,  4.9889e-03,  1.0802e-02,
         1.4661e-02, -3.9108e-03,  8.0443e-03, -3.6045e-03,  1.3764e-02,
        -2.5790e-03, -5.8609e-05,  1.3170e-02,  1.2905e-02,  8.6515e-03,
         8.4878e-03,  1.2752e-02]

final x: [ 1.8185e+00,  1.0856e+00,  3.1408e-01,  7.0399e-01,  3.2723e-01,
        -8.9172e-01, -8.9174e-01, -8.9174e-01, -8.9174e-01, -8.9174e-01,
        -8.9174e-01,  3.8163e+04, -8.9174e-01,  1.7117e-01,  7.0106e+01,
         3.3073e-01,  1.6749e-01,  6.1046e-01,  6.0167e+01,  1.6665e-01,
        -8.9173e-01, -8.9214e-01, -8.9174e-01,  1.6702e-01, -8.9174e-01,
        -8.9174e-01, -8.9174e-01]

01 vector: [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]


# x, predict_idt, predict_T, loss_his = md.solve_inverse2(x_0, lr = 10, t1 = 300, t2 = 1, t3 = 10, gpu_index = 1, 
#                     iteration = 10000, lr_decay_step = 100, lr_decay_rate = 0.97)

if i % 1000 == 0:
        optimizer.param_groups[0]['lr'] *= 10
if i < 200:
        optimizer.param_groups[0]['lr'] = 1e-3