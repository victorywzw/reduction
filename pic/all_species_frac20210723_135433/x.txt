initial x:[ 0.0044,  0.0089, -0.0044, -0.0005,  0.0106,  0.0112,  0.0041, -0.0042,
        -0.0021,  0.0131, -0.0019,  0.0146, -0.0027,  0.0126,  0.0020,  0.0085,
         0.0148,  0.0020,  0.0059,  0.0044, -0.0044,  0.0134,  0.0070, -0.0013,
         0.0074,  0.0056, -0.0042]

final x: [ 1.8185e+00,  1.0856e+00,  3.1408e-01,  7.0399e-01,  3.2723e-01,
        -8.9172e-01, -8.9174e-01, -8.9174e-01, -8.9174e-01, -8.9174e-01,
        -8.9174e-01,  3.8163e+04, -8.9174e-01,  1.7117e-01,  7.0106e+01,
         3.3073e-01,  1.6749e-01,  6.1046e-01,  6.0167e+01,  1.6665e-01,
        -8.9173e-01, -8.9214e-01, -8.9174e-01,  1.6702e-01, -8.9174e-01,
        -8.9174e-01, -8.9174e-01]

01 vector: [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0]

x, predict_idt, predict_T, loss_his = md.solve_inverse2(x_0, lr = 1e-5, t1 = 30000, t2 = 1, t3 = 200, gpu_index = 1, 
                                                        iteration = 10000, lr_decay_step = 100, lr_decay_rate = 1.1)

optimizer.param_groups[0]['lr'] = 0.01 * 1 / np.max(np.abs(tmp)) # if i > 200